// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing a platform user
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")

  // tasks     UserTask[]
  roles     Roles[] 
  comments  TaskComment[]
}

model Task {
  id        String   @id @default(uuid())
  title     String
  description String?
  status    TaskStatus
  priority  TaskPriority
  assigneeId String?
  createdById String
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User   @relation("CreatedTasks", fields: [createdById], references: [id])
  assignee User? @relation("AssignedTasks", fields: [assigneeId], references: [id])
  // users     UserTask[]
  comments  TaskComment[]
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Roles {
  id        String   @id @default(uuid())
  name      String   @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permissions[]
}

// model UserTask {
//   id        String   @id @default(uuid())
//   userId    String
//   taskId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])
//   task Task @relation(fields: [taskId], references: [id])
// }

// model RolePermissions {
//   id        String   @id @default(uuid())
//   roleId    String
//   permissionId String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   role Roles @relation(fields: [roleId], references: [id])
//   permission Permissions @relation(fields: [permissionId], references: [id])
// }

// model UserRoles {
//   id        String   @id @default(uuid())
//   userId    String
//   roleId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])
//   role Roles @relation(fields: [roleId], references: [id])
// }

model Permissions {
  id        String   @id @default(uuid())
  resource  String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles       Roles[]
}