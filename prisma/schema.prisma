// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing a platform user
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")

  // tasks     UserTask[]
  // roles     Roles[] 
  invitations Invite[]
  comments  TaskComment[]
  memberships UserOrganization[]
}

model Task {
  id        String   @id @default(uuid())
  title     String
  description String?
  status    TaskStatus
  priority  TaskPriority
  assigneeId String?
  createdById String
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organizationId String

  createdBy User   @relation("CreatedTasks", fields: [createdById], references: [id])
  assignee User? @relation("AssignedTasks", fields: [assigneeId], references: [id])
  // users     UserTask[]
  comments  TaskComment[]
  organization Organization @relation(fields: [organizationId], references: [id])
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Roles {
  id        String   @id @default(uuid())
  name      String   
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organizationId String?
  
  // users       User[]
  permissions Permissions[]
  organization Organization? @relation(fields: [organizationId], references: [id])
  memberships UserOrganization[]
}

model Permissions {
  id        String   @id @default(uuid())
  resource  String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles       Roles[]
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberships UserOrganization[]
  tasks       Task[]
  roles       Roles[]
  invites     Invite[]
}

model UserOrganization {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  roleId         String
  joinedAt       DateTime @default(now())

  user           User      @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Roles     @relation(fields: [roleId], references: [id])
}

model Invite {
  id             String   @id @default(uuid())
  email          String
  organizationId String
  invitedById    String
  token          String   @unique
  accepted       Boolean  @default(false)
  createdAt      DateTime @default(now())
  expiresAt      DateTime

  organization   Organization @relation(fields: [organizationId], references: [id])
  invitedBy      User         @relation(fields: [invitedById], references: [id])
}